{% extends "base.tera" %}

{% block title %}Ichimi Server - Dashboard{% endblock %}

{% block header %}
<div class="page-header d-print-none">
    <div class="container-xl">
        <div class="row g-2 align-items-center">
            <div class="col">
                <div class="page-pretitle">
                    <span class="text-muted">Working Directory:</span> 
                    <span class="text-primary">{{ working_directory }}</span>
                </div>
                <h2 class="page-title">Process Dashboard</h2>
            </div>
            <div class="col-auto ms-auto d-print-none">
                <div class="btn-list">
                    <button @click="$refs.dashboard.refresh()" class="btn btn-primary">
                        <i class="ti ti-refresh"></i> Refresh
                    </button>
                    <button @click="$refs.addProcessModal.show()" class="btn btn-primary">
                        <i class="ti ti-plus"></i> Add Process
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block content %}
<div x-data="dashboard()" x-ref="dashboard" x-init="init()">
    <!-- Stats Cards -->
    <div class="row row-deck row-cards mb-4">
        <div class="col-sm-6 col-lg-3">
            <div class="card">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="subheader">Total Processes</div>
                    </div>
                    <div class="h1 mb-0" x-text="stats.total">0</div>
                </div>
            </div>
        </div>
        <div class="col-sm-6 col-lg-3">
            <div class="card">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="subheader">Running</div>
                    </div>
                    <div class="d-flex align-items-baseline">
                        <div class="h1 mb-0 me-2 text-success" x-text="stats.running">0</div>
                        <div class="me-auto">
                            <span class="text-success d-inline-flex align-items-center lh-1">
                                <i class="ti ti-trending-up"></i>
                            </span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-sm-6 col-lg-3">
            <div class="card">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="subheader">Stopped</div>
                    </div>
                    <div class="d-flex align-items-baseline">
                        <div class="h1 mb-0 me-2 text-warning" x-text="stats.stopped">0</div>
                        <div class="me-auto">
                            <span class="text-warning d-inline-flex align-items-center lh-1">
                                <i class="ti ti-minus"></i>
                            </span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-sm-6 col-lg-3">
            <div class="card">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="subheader">Failed</div>
                    </div>
                    <div class="d-flex align-items-baseline">
                        <div class="h1 mb-0 me-2 text-danger" x-text="stats.failed">0</div>
                        <div class="me-auto">
                            <span class="text-danger d-inline-flex align-items-center lh-1">
                                <i class="ti ti-trending-down"></i>
                            </span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Process List -->
    <div class="card">
        <div class="card-header">
            <h3 class="card-title">Processes</h3>
            <div class="card-actions">
                <div class="input-icon">
                    <input type="text" x-model="searchTerm" class="form-control form-control-sm" placeholder="Search...">
                    <span class="input-icon-addon">
                        <i class="ti ti-search"></i>
                    </span>
                </div>
            </div>
        </div>
        <div class="table-responsive">
            <table class="table table-vcenter card-table">
                <thead>
                    <tr>
                        <th>Process ID</th>
                        <th>Status</th>
                        <th>Command</th>
                        <th>PID</th>
                        <th>Auto Start</th>
                        <th class="w-1"></th>
                    </tr>
                </thead>
                <tbody>
                    <template x-for="process in filteredProcesses" :key="process.id">
                        <tr>
                            <td>
                                <div class="text-reset" x-text="process.id"></div>
                            </td>
                            <td>
                                <span class="badge" 
                                      :class="{
                                          'bg-success': getProcessState(process) === 'Running',
                                          'bg-warning': getProcessState(process) === 'Stopped',
                                          'bg-danger': getProcessState(process) === 'Failed'
                                      }"
                                      x-text="getProcessState(process)">
                                </span>
                            </td>
                            <td class="text-secondary">
                                <code x-text="process.command"></code>
                                <template x-if="process.args && process.args.length > 0">
                                    <span class="text-muted" x-text="' ' + process.args.join(' ')"></span>
                                </template>
                            </td>
                            <td>
                                <span x-text="getProcessPid(process) || '-'"></span>
                            </td>
                            <td>
                                <label class="form-check form-switch mb-0">
                                    <input class="form-check-input" 
                                           type="checkbox" 
                                           :checked="process.auto_start"
                                           @change="toggleAutoStart(process.id, $event.target.checked)"
                                           title="Toggle auto-start on server launch">
                                    <span class="form-check-label" x-text="process.auto_start ? 'Enabled' : 'Disabled'"></span>
                                </label>
                            </td>
                            <td>
                                <div class="btn-list flex-nowrap">
                                    <template x-if="getProcessState(process) === 'Stopped'">
                                        <button @click="startProcess(process.id)" class="btn btn-sm btn-success">
                                            <i class="ti ti-player-play"></i> Start
                                        </button>
                                    </template>
                                    <template x-if="getProcessState(process) === 'Running'">
                                        <button @click="stopProcess(process.id)" class="btn btn-sm btn-warning">
                                            <i class="ti ti-player-stop"></i> Stop
                                        </button>
                                    </template>
                                    <button @click="viewLogs(process.id)" class="btn btn-sm btn-info">
                                        <i class="ti ti-file-text"></i> Logs
                                    </button>
                                    <button @click="removeProcess(process.id)" class="btn btn-sm btn-danger">
                                        <i class="ti ti-trash"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    </template>
                </tbody>
            </table>
            <template x-if="filteredProcesses.length === 0">
                <div class="empty">
                    <div class="empty-img"><img src="https://tabler.io/static/illustrations/undraw_printing_invoices_-5-r4r.svg" height="128" alt="">
                    </div>
                    <p class="empty-title">No processes found</p>
                    <p class="empty-subtitle text-secondary">
                        Try adjusting your search or add a new process.
                    </p>
                    <div class="empty-action">
                        <button @click="$refs.addProcessModal.show()" class="btn btn-primary">
                            <i class="ti ti-plus"></i> Add your first process
                        </button>
                    </div>
                </div>
            </template>
        </div>
    </div>

    <!-- Add Process Modal -->
    <div class="modal modal-blur fade" id="addProcessModal" tabindex="-1" x-ref="addProcessModal">
        <div class="modal-dialog modal-lg modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add New Process</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <form @submit.prevent="addProcess()">
                    <div class="modal-body">
                        <div class="mb-3">
                            <label class="form-label required">Process ID</label>
                            <input type="text" class="form-control" x-model="newProcess.id" placeholder="my-process" required>
                            <small class="form-hint">Unique identifier for this process</small>
                        </div>
                        <div class="mb-3">
                            <label class="form-label required">Command</label>
                            <input type="text" class="form-control" x-model="newProcess.command" placeholder="/usr/bin/node" required>
                            <small class="form-hint">Full path to the executable</small>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Arguments</label>
                            <input type="text" class="form-control" x-model="newProcess.args" placeholder="server.js --port 3000">
                            <small class="form-hint">Space-separated command arguments</small>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Working Directory</label>
                            <input type="text" class="form-control" x-model="newProcess.cwd" placeholder="/path/to/project">
                            <small class="form-hint">Directory to run the process in</small>
                        </div>
                        <div class="mb-3">
                            <label class="form-check form-switch">
                                <input class="form-check-input" type="checkbox" x-model="newProcess.auto_start">
                                <span class="form-check-label">Auto-start on server launch</span>
                            </label>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn me-auto" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-primary">Add Process</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Logs Modal -->
    <div class="modal modal-blur fade" id="logsModal" tabindex="-1" x-ref="logsModal">
        <div class="modal-dialog modal-xl modal-dialog-centered modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Process Logs: <span x-text="selectedProcess"></span></h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="card bg-dark text-white">
                        <div class="card-body">
                            <pre class="mb-0" style="max-height: 60vh; overflow-y: auto;"><code x-html="logs"></code></pre>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn me-auto" data-bs-dismiss="modal">Close</button>
                    <button @click="refreshLogs()" class="btn btn-primary">
                        <i class="ti ti-refresh"></i> Refresh
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block scripts %}
<script>
function dashboard() {
    return {
        processes: [],
        searchTerm: '',
        stats: {
            total: 0,
            running: 0,
            stopped: 0,
            failed: 0
        },
        newProcess: {
            id: '',
            command: '',
            args: '',
            cwd: '',
            auto_start: false
        },
        selectedProcess: null,
        logs: '',
        refreshInterval: null,
        
        async init() {
            await this.fetchDashboard();
            // Auto-refresh every 5 seconds
            this.refreshInterval = setInterval(() => this.fetchDashboard(), 5000);
            
            // Initialize modals after a short delay to ensure Bootstrap is loaded
            this.$nextTick(() => {
                if (typeof bootstrap !== 'undefined') {
                    this.$refs.addProcessModal = new bootstrap.Modal(this.$refs.addProcessModal);
                    this.$refs.logsModal = new bootstrap.Modal(this.$refs.logsModal);
                } else {
                    console.warn('Bootstrap is not loaded yet');
                }
            });
        },
        
        async fetchDashboard() {
            try {
                const data = await Alpine.store('app').fetchData('/dashboard');
                this.processes = data.processes;
                this.stats = data.stats;
            } catch (error) {
                console.error('Failed to fetch dashboard:', error);
            }
        },
        
        async refresh() {
            await this.fetchDashboard();
        },
        
        get filteredProcesses() {
            if (!this.searchTerm) return this.processes;
            
            const term = this.searchTerm.toLowerCase();
            return this.processes.filter(p => 
                p.id.toLowerCase().includes(term) || 
                p.command.toLowerCase().includes(term)
            );
        },
        
        getProcessState(process) {
            return process.state?.state || 'Stopped';
        },
        
        getProcessPid(process) {
            return process.state?.pid || null;
        },
        
        async startProcess(id) {
            try {
                await Alpine.store('app').postData(`/processes/${id}/start`);
                await this.fetchDashboard();
            } catch (error) {
                alert('Failed to start process: ' + error.message);
            }
        },
        
        async stopProcess(id) {
            try {
                await Alpine.store('app').postData(`/processes/${id}/stop`, {});
                await this.fetchDashboard();
            } catch (error) {
                alert('Failed to stop process: ' + error.message);
            }
        },
        
        async removeProcess(id) {
            if (confirm(`Are you sure you want to remove process "${id}"?`)) {
                try {
                    await Alpine.store('app').deleteData(`/processes/${id}`);
                    await this.fetchDashboard();
                } catch (error) {
                    alert('Failed to remove process: ' + error.message);
                }
            }
        },
        
        async addProcess() {
            try {
                const processData = {
                    id: this.newProcess.id,
                    command: this.newProcess.command,
                    args: this.newProcess.args ? this.newProcess.args.split(' ').filter(a => a) : undefined,
                    cwd: this.newProcess.cwd || undefined,
                    auto_start: this.newProcess.auto_start
                };
                
                await Alpine.store('app').postData('/processes', processData);
                this.$refs.addProcessModal.hide();
                this.resetNewProcess();
                await this.fetchDashboard();
            } catch (error) {
                alert('Failed to add process: ' + error.message);
            }
        },
        
        resetNewProcess() {
            this.newProcess = {
                id: '',
                command: '',
                args: '',
                cwd: '',
                auto_start: false
            };
        },
        
        async viewLogs(id) {
            this.selectedProcess = id;
            await this.refreshLogs();
            this.$refs.logsModal.show();
        },
        
        async refreshLogs() {
            if (!this.selectedProcess) return;
            
            try {
                const logs = await Alpine.store('app').fetchData(`/processes/${this.selectedProcess}/logs?lines=100`);
                this.logs = logs.join('\n') || 'No logs available';
            } catch (error) {
                this.logs = 'Failed to fetch logs: ' + error.message;
            }
        },
        
        async toggleAutoStart(processId, enabled) {
            try {
                const response = await fetch(`/api/processes/${processId}/config`, {
                    method: 'PATCH',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ auto_start: enabled })
                });
                
                if (response.ok) {
                    Alpine.store('app').showToast('success', `Auto-start ${enabled ? 'enabled' : 'disabled'} for ${processId}`);
                    // Update local process data
                    const process = this.processes.find(p => p.id === processId);
                    if (process) {
                        process.auto_start = enabled;
                    }
                } else {
                    throw new Error(`Failed to update auto-start: ${response.statusText}`);
                }
            } catch (error) {
                Alpine.store('app').showToast('error', error.message);
                // Revert the checkbox on error
                await this.fetchDashboard();
            }
        },
        
        destroy() {
            if (this.refreshInterval) {
                clearInterval(this.refreshInterval);
            }
        }
    };
}
</script>
{% endblock %}