{% extends "base.tera" %}

{% block title %}Ichimi Server - „Éó„É≠„Çª„ÇπÁÆ°ÁêÜ„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ{% endblock %}

{% block content %}
<div class="dashboard">
    <div class="dashboard-header">
        <h2>„Éó„É≠„Çª„ÇπÁÆ°ÁêÜ</h2>
        <div class="dashboard-actions">
            <button class="button" id="refreshBtn">
                <span>üîÑ Êõ¥Êñ∞</span>
            </button>
            <button class="button" id="addProcessBtn">
                <span>‚ûï Êñ∞Ë¶è„Éó„É≠„Çª„Çπ</span>
            </button>
        </div>
    </div>
    
    <div class="stats-grid">
        <div class="card stat-card">
            <div class="stat-label">Á®ºÂÉç‰∏≠</div>
            <div class="stat-value" id="runningCount">0</div>
        </div>
        <div class="card stat-card">
            <div class="stat-label">ÂÅúÊ≠¢‰∏≠</div>
            <div class="stat-value" id="stoppedCount">0</div>
        </div>
        <div class="card stat-card">
            <div class="stat-label">„Ç®„É©„Éº</div>
            <div class="stat-value" id="failedCount">0</div>
        </div>
        <div class="card stat-card">
            <div class="stat-label">ÂêàË®à</div>
            <div class="stat-value" id="totalCount">0</div>
        </div>
    </div>
    
    <div class="processes-section">
        <h3>„Éó„É≠„Çª„Çπ‰∏ÄË¶ß</h3>
        <div class="process-grid" id="processList">
            <!-- „Éó„É≠„Çª„Çπ„Ç´„Éº„Éâ„Åå„Åì„Åì„Å´ÂãïÁöÑ„Å´ËøΩÂä†„Åï„Çå„Åæ„Åô -->
        </div>
    </div>
    
    <div id="emptyState" class="empty-state" style="display: none;">
        <div class="card">
            <p>„Éó„É≠„Çª„Çπ„ÅåÁôªÈå≤„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì</p>
            <button class="button" onclick="document.getElementById('addProcessBtn').click()">
                ÊúÄÂàù„ÅÆ„Éó„É≠„Çª„Çπ„ÇíËøΩÂä†
            </button>
        </div>
    </div>
</div>

<!-- „Éó„É≠„Çª„ÇπËøΩÂä†„É¢„Éº„ÉÄ„É´ -->
<div id="addProcessModal" class="modal" style="display: none;">
    <div class="modal-content">
        <div class="modal-header">
            <h3>Êñ∞Ë¶è„Éó„É≠„Çª„ÇπËøΩÂä†</h3>
            <button class="modal-close" onclick="closeModal()">&times;</button>
        </div>
        <div class="modal-body">
            <form id="addProcessForm">
                <div class="form-group">
                    <label for="processId">„Éó„É≠„Çª„ÇπID</label>
                    <input type="text" id="processId" name="id" required placeholder="my-process">
                </div>
                <div class="form-group">
                    <label for="processCommand">„Ç≥„Éû„É≥„Éâ</label>
                    <input type="text" id="processCommand" name="command" required placeholder="/usr/bin/node">
                </div>
                <div class="form-group">
                    <label for="processArgs">ÂºïÊï∞Ôºà„Ç´„É≥„ÉûÂå∫Âàá„ÇäÔºâ</label>
                    <input type="text" id="processArgs" name="args" placeholder="server.js, --port, 3000">
                </div>
                <div class="form-group">
                    <label for="processCwd">‰ΩúÊ•≠„Éá„Ç£„É¨„ÇØ„Éà„É™</label>
                    <input type="text" id="processCwd" name="cwd" placeholder="/path/to/project">
                </div>
                <div class="form-actions">
                    <button type="button" class="button button-secondary" onclick="closeModal()">„Ç≠„É£„É≥„Çª„É´</button>
                    <button type="submit" class="button">ËøΩÂä†</button>
                </div>
            </form>
        </div>
    </div>
</div>
{% endblock %}

{% block styles %}
<style>
    .dashboard-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
    }
    
    .dashboard-header h2 {
        font-size: 1.75rem;
        font-weight: 600;
    }
    
    .dashboard-actions {
        display: flex;
        gap: 0.5rem;
    }
    
    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
        gap: 1rem;
        margin-bottom: 2rem;
    }
    
    .stat-card {
        text-align: center;
        padding: 1rem;
    }
    
    .stat-label {
        font-size: 0.875rem;
        color: var(--text-secondary);
        margin-bottom: 0.5rem;
    }
    
    .stat-value {
        font-size: 2rem;
        font-weight: bold;
        color: var(--accent-color);
    }
    
    .processes-section h3 {
        margin-bottom: 1rem;
        font-size: 1.25rem;
    }
    
    .process-card {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }
    
    .process-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
    
    .process-title {
        font-weight: 600;
        font-size: 1.1rem;
    }
    
    .process-info {
        display: flex;
        flex-direction: column;
        gap: 0.25rem;
        font-size: 0.875rem;
        color: var(--text-secondary);
    }
    
    .process-actions {
        display: flex;
        gap: 0.5rem;
        margin-top: 0.5rem;
    }
    
    .button-small {
        padding: 0.25rem 0.75rem;
        font-size: 0.8rem;
    }
    
    .button-secondary {
        background-color: var(--bg-secondary);
        color: var(--text-primary);
        border: 1px solid var(--border-color);
    }
    
    .button-danger {
        background-color: var(--danger-color);
    }
    
    .empty-state {
        text-align: center;
        padding: 3rem 1rem;
    }
    
    .empty-state p {
        color: var(--text-secondary);
        margin-bottom: 1rem;
    }
    
    /* „É¢„Éº„ÉÄ„É´„Çπ„Çø„Ç§„É´ */
    .modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }
    
    .modal-content {
        background-color: var(--card-bg);
        border-radius: 8px;
        width: 90%;
        max-width: 500px;
        max-height: 90vh;
        overflow-y: auto;
    }
    
    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1.5rem;
        border-bottom: 1px solid var(--border-color);
    }
    
    .modal-close {
        background: none;
        border: none;
        font-size: 1.5rem;
        cursor: pointer;
        color: var(--text-secondary);
    }
    
    .modal-body {
        padding: 1.5rem;
    }
    
    .form-group {
        margin-bottom: 1rem;
    }
    
    .form-group label {
        display: block;
        margin-bottom: 0.25rem;
        font-size: 0.875rem;
        font-weight: 500;
    }
    
    .form-group input {
        width: 100%;
        padding: 0.5rem;
        border: 1px solid var(--border-color);
        border-radius: 4px;
        background-color: var(--bg-primary);
        color: var(--text-primary);
    }
    
    .form-actions {
        display: flex;
        justify-content: flex-end;
        gap: 0.5rem;
        margin-top: 1.5rem;
    }
</style>
{% endblock %}

{% block scripts %}
<script>
    let processes = [];
    
    // „Éó„É≠„Çª„Çπ‰∏ÄË¶ß„ÇíÂèñÂæó
    async function fetchProcesses() {
        try {
            const response = await fetch('/api/processes');
            if (response.ok) {
                processes = await response.json();
                updateUI();
            }
        } catch (error) {
            console.error('„Éó„É≠„Çª„Çπ‰∏ÄË¶ß„ÅÆÂèñÂæó„Å´Â§±Êïó:', error);
        }
    }
    
    // UIÊõ¥Êñ∞
    function updateUI() {
        const stats = {
            running: 0,
            stopped: 0,
            failed: 0
        };
        
        const processList = document.getElementById('processList');
        processList.innerHTML = '';
        
        if (processes.length === 0) {
            document.getElementById('emptyState').style.display = 'block';
            document.querySelector('.processes-section').style.display = 'none';
        } else {
            document.getElementById('emptyState').style.display = 'none';
            document.querySelector('.processes-section').style.display = 'block';
            
            processes.forEach(process => {
                // „Çπ„ÉÜ„Éº„Çø„Çπ„Ç´„Ç¶„É≥„Éà
                const processState = process.state?.state || process.state || 'Stopped';
                if (processState === 'Running') stats.running++;
                else if (processState === 'Stopped') stats.stopped++;
                else if (processState === 'Failed') stats.failed++;
                
                // „Éó„É≠„Çª„Çπ„Ç´„Éº„Éâ‰ΩúÊàê
                const card = createProcessCard(process);
                processList.appendChild(card);
            });
        }
        
        // Áµ±Ë®àÊõ¥Êñ∞
        document.getElementById('runningCount').textContent = stats.running;
        document.getElementById('stoppedCount').textContent = stats.stopped;
        document.getElementById('failedCount').textContent = stats.failed;
        document.getElementById('totalCount').textContent = processes.length;
    }
    
    // „Éó„É≠„Çª„Çπ„Ç´„Éº„Éâ‰ΩúÊàê
    function createProcessCard(process) {
        const card = document.createElement('div');
        card.className = 'card process-card';
        
        const processState = process.state?.state || process.state || 'Stopped';
        const statusClass = processState.toLowerCase();
        const statusText = processState === 'Running' ? 'Á®ºÂÉç‰∏≠' : 
                          processState === 'Stopped' ? 'ÂÅúÊ≠¢‰∏≠' : '„Ç®„É©„Éº';
        
        card.innerHTML = `
            <div class="process-header">
                <span class="process-title">${process.id}</span>
                <span class="status-badge status-${statusClass}">${statusText}</span>
            </div>
            <div class="process-info">
                <span>„Ç≥„Éû„É≥„Éâ: ${process.command}</span>
                ${process.state?.pid ? `<span>PID: ${process.state.pid}</span>` : ''}
                ${process.args && process.args.length > 0 ? `<span>ÂºïÊï∞: ${process.args.join(' ')}</span>` : ''}
            </div>
            <div class="process-actions">
                ${processState === 'Stopped' ? 
                    `<button class="button button-small" onclick="startProcess('${process.id}')">ÈñãÂßã</button>` :
                    `<button class="button button-small button-danger" onclick="stopProcess('${process.id}')">ÂÅúÊ≠¢</button>`
                }
                <button class="button button-small button-secondary" onclick="viewLogs('${process.id}')">„É≠„Ç∞</button>
                <button class="button button-small button-secondary" onclick="removeProcess('${process.id}')">ÂâäÈô§</button>
            </div>
        `;
        
        return card;
    }
    
    // „Éó„É≠„Çª„ÇπÈñãÂßã
    async function startProcess(id) {
        try {
            const response = await fetch(`/api/processes/${id}/start`, { method: 'POST' });
            if (response.ok) {
                fetchProcesses();
            }
        } catch (error) {
            console.error('„Éó„É≠„Çª„Çπ„ÅÆÈñãÂßã„Å´Â§±Êïó:', error);
        }
    }
    
    // „Éó„É≠„Çª„ÇπÂÅúÊ≠¢
    async function stopProcess(id) {
        try {
            const response = await fetch(`/api/processes/${id}/stop`, { 
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({})
            });
            if (response.ok) {
                fetchProcesses();
            }
        } catch (error) {
            console.error('„Éó„É≠„Çª„Çπ„ÅÆÂÅúÊ≠¢„Å´Â§±Êïó:', error);
        }
    }
    
    // „Éó„É≠„Çª„ÇπÂâäÈô§
    async function removeProcess(id) {
        if (confirm(`„Éó„É≠„Çª„Çπ "${id}" „ÇíÂâäÈô§„Åó„Åæ„Åô„ÅãÔºü`)) {
            try {
                const response = await fetch(`/api/processes/${id}`, { method: 'DELETE' });
                if (response.ok) {
                    fetchProcesses();
                }
            } catch (error) {
                console.error('„Éó„É≠„Çª„Çπ„ÅÆÂâäÈô§„Å´Â§±Êïó:', error);
            }
        }
    }
    
    // „É≠„Ç∞Ë°®Á§∫Ôºà‰ªäÂæåÂÆüË£ÖÔºâ
    function viewLogs(id) {
        alert(`„Éó„É≠„Çª„Çπ "${id}" „ÅÆ„É≠„Ç∞Ë°®Á§∫Ê©üËÉΩ„ÅØ‰ªäÂæåÂÆüË£Ö‰∫àÂÆö„Åß„Åô`);
    }
    
    // „É¢„Éº„ÉÄ„É´Ë°®Á§∫
    document.getElementById('addProcessBtn').addEventListener('click', () => {
        document.getElementById('addProcessModal').style.display = 'flex';
    });
    
    // „É¢„Éº„ÉÄ„É´ÈùûË°®Á§∫
    function closeModal() {
        document.getElementById('addProcessModal').style.display = 'none';
        document.getElementById('addProcessForm').reset();
    }
    
    // „Éó„É≠„Çª„ÇπËøΩÂä†„Éï„Ç©„Éº„É†ÈÄÅ‰ø°
    document.getElementById('addProcessForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const formData = new FormData(e.target);
        const args = formData.get('args').split(',').map(a => a.trim()).filter(a => a);
        
        const processData = {
            id: formData.get('id'),
            command: formData.get('command'),
            args: args.length > 0 ? args : undefined,
            cwd: formData.get('cwd') || undefined
        };
        
        try {
            const response = await fetch('/api/processes', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(processData)
            });
            
            if (response.ok) {
                closeModal();
                fetchProcesses();
            } else {
                alert('„Éó„É≠„Çª„Çπ„ÅÆËøΩÂä†„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
            }
        } catch (error) {
            console.error('„Éó„É≠„Çª„Çπ„ÅÆËøΩÂä†„Å´Â§±Êïó:', error);
            alert('„Éó„É≠„Çª„Çπ„ÅÆËøΩÂä†„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
        }
    });
    
    // Êõ¥Êñ∞„Éú„Çø„É≥
    document.getElementById('refreshBtn').addEventListener('click', fetchProcesses);
    
    // ÂàùÊúü„É≠„Éº„Éâ
    fetchProcesses();
    
    // ÂÆöÊúüÊõ¥Êñ∞Ôºà5Áßí„Åî„Å®Ôºâ
    setInterval(fetchProcesses, 5000);
</script>
{% endblock %}