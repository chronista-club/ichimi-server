(()=>{var{defineProperty:w,getOwnPropertyNames:y,getOwnPropertyDescriptor:z}=Object,A=Object.prototype.hasOwnProperty;var x=new WeakMap,B=(j)=>{var k=x.get(j),u;if(k)return k;if(k=w({},"__esModule",{value:!0}),j&&typeof j==="object"||typeof j==="function")y(j).map((f)=>!A.call(k,f)&&w(k,f,{get:()=>j[f],enumerable:!(u=z(j,f))||u.enumerable}));return x.set(j,k),k};var D={};console.log("app.ts loaded");document.addEventListener("alpine:init",()=>{console.log("Alpine.js is initializing...");let j={mode:"dark",autoRefresh:!0,refreshInterval:5000,initialized:!1,async loadSettings(){try{let f=await fetch("/api/settings");if(f.ok){let h=await f.json();this.mode=h.color_mode,this.autoRefresh=h.auto_refresh,this.refreshInterval=h.refresh_interval,this.updateTheme()}}catch(f){console.error("Failed to load settings:",f)}},async toggleMode(){this.mode=this.mode==="dark"?"light":"dark",this.updateTheme(),await this.saveSettings()},async saveSettings(){try{if(!(await fetch("/api/settings",{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify({color_mode:this.mode,auto_refresh:this.autoRefresh,refresh_interval:this.refreshInterval})})).ok)console.error("Failed to save settings")}catch(f){console.error("Failed to save settings:",f)}},updateTheme(){if(this.mode==="dark")document.documentElement.classList.add("dark");else document.documentElement.classList.remove("dark")},async init(){if(this.initialized){console.warn("State store init() called multiple times - skipping");return}this.initialized=!0,console.log("State init"),await this.loadSettings()}};window.Alpine.store("state",j),j.init();let k={processes:[],loading:!1,error:null,refreshInterval:null,initialized:!1,async loadProcesses(){this.loading=!0,this.error=null;try{let f=await fetch("/api/processes");if(f.ok)this.processes=await f.json();else this.error="Failed to load processes"}catch(f){this.error=`Error loading processes: ${f}`,console.error("Failed to load processes:",f)}finally{this.loading=!1}},async startProcess(f){try{let h=await fetch(`/api/processes/${f}/start`,{method:"POST"});if(h.ok)await this.loadProcesses();else{let q=await h.text();this.error=`Failed to start process: ${q}`}}catch(h){this.error=`Error starting process: ${h}`,console.error("Failed to start process:",h)}},async stopProcess(f){try{let h=await fetch(`/api/processes/${f}/stop`,{method:"POST"});if(h.ok)await this.loadProcesses();else{let q=await h.text();this.error=`Failed to stop process: ${q}`}}catch(h){this.error=`Error stopping process: ${h}`,console.error("Failed to stop process:",h)}},async removeProcess(f){if(!confirm(`Are you sure you want to remove process ${f}?`))return;try{let h=await fetch(`/api/processes/${f}`,{method:"DELETE"});if(h.ok)await this.loadProcesses();else{let q=await h.text();this.error=`Failed to remove process: ${q}`}}catch(h){this.error=`Error removing process: ${h}`,console.error("Failed to remove process:",h)}},getStatusClass(f){switch(f){case"Running":return"status-running";case"Stopped":return"status-stopped";case"Failed":return"status-failed";case"NotStarted":default:return"status-notstarted"}},startAutoRefresh(){let f=window.Alpine.store("state");if(f.autoRefresh&&!this.refreshInterval)this.refreshInterval=setInterval(()=>{this.loadProcesses()},f.refreshInterval)},stopAutoRefresh(){if(this.refreshInterval)clearInterval(this.refreshInterval),this.refreshInterval=null},async init(){if(this.initialized){console.warn("Processes store init() called multiple times - skipping");return}this.initialized=!0,console.log("Processes store init"),await this.loadProcesses(),this.startAutoRefresh()}};window.Alpine.store("processes",k),k.init();let u={templates:[],loading:!1,error:null,selectedTemplate:null,showModal:!1,processId:"",variableValues:{},initialized:!1,async loadTemplates(){this.loading=!0,this.error=null;try{let f=await fetch("/api/templates");if(f.ok)this.templates=await f.json();else this.error="Failed to load templates"}catch(f){this.error=`Error loading templates: ${f}`,console.error("Failed to load templates:",f)}finally{this.loading=!1}},selectTemplate(f){this.selectedTemplate=f,this.showModal=!0,this.processId=`${f.template_id}-${Date.now()}`,this.variableValues={},f.variables.forEach((h)=>{if(h.default_value)this.variableValues[h.name]=h.default_value})},closeModal(){this.showModal=!1,this.selectedTemplate=null,this.processId="",this.variableValues={}},async instantiateTemplate(){if(!this.selectedTemplate)return;try{let f=await fetch(`/api/templates/${this.selectedTemplate.template_id}/instantiate`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({process_id:this.processId,values:this.variableValues})});if(f.ok)await window.Alpine.store("processes").loadProcesses(),this.closeModal();else{let h=await f.text();this.error=`Failed to instantiate template: ${h}`}}catch(f){this.error=`Error instantiating template: ${f}`,console.error("Failed to instantiate template:",f)}},async init(){if(this.initialized){console.warn("Templates store init() called multiple times - skipping");return}this.initialized=!0,console.log("Templates store init"),await this.loadTemplates()}};window.Alpine.store("templates",u)});console.log("Event listener registered");})();
