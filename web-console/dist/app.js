(()=>{var{defineProperty:m,getOwnPropertyNames:u,getOwnPropertyDescriptor:v}=Object,w=Object.prototype.hasOwnProperty;var q=new WeakMap,x=(h)=>{var j=q.get(h),b;if(j)return j;if(j=m({},"__esModule",{value:!0}),h&&typeof h==="object"||typeof h==="function")u(h).map((f)=>!w.call(j,f)&&m(j,f,{get:()=>h[f],enumerable:!(b=v(h,f))||b.enumerable}));return q.set(h,j),j};var y={};console.log("app.ts loaded");document.addEventListener("alpine:init",()=>{console.log("Alpine.js is initializing...");let h={mode:"dark",autoRefresh:!0,refreshInterval:5000,initialized:!1,async loadSettings(){try{let b=await fetch("/api/settings");if(b.ok){let f=await b.json();this.mode=f.color_mode,this.autoRefresh=f.auto_refresh,this.refreshInterval=f.refresh_interval,this.updateTheme()}}catch(b){console.error("Failed to load settings:",b)}},async toggleMode(){this.mode=this.mode==="dark"?"light":"dark",this.updateTheme(),await this.saveSettings()},async saveSettings(){try{if(!(await fetch("/api/settings",{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify({color_mode:this.mode,auto_refresh:this.autoRefresh,refresh_interval:this.refreshInterval})})).ok)console.error("Failed to save settings")}catch(b){console.error("Failed to save settings:",b)}},updateTheme(){if(this.mode==="dark")document.documentElement.classList.add("dark");else document.documentElement.classList.remove("dark")},async init(){if(this.initialized){console.warn("State store init() called multiple times - skipping");return}this.initialized=!0,console.log("State init"),await this.loadSettings()}};window.Alpine.store("state",h),h.init();let j={processes:[],loading:!1,error:null,refreshInterval:null,initialized:!1,async loadProcesses(){this.loading=!0,this.error=null;try{let b=await fetch("/api/processes");if(b.ok)this.processes=await b.json();else this.error="Failed to load processes"}catch(b){this.error=`Error loading processes: ${b}`,console.error("Failed to load processes:",b)}finally{this.loading=!1}},async startProcess(b){try{let f=await fetch(`/api/processes/${b}/start`,{method:"POST"});if(f.ok)await this.loadProcesses();else{let k=await f.text();this.error=`Failed to start process: ${k}`}}catch(f){this.error=`Error starting process: ${f}`,console.error("Failed to start process:",f)}},async stopProcess(b){try{let f=await fetch(`/api/processes/${b}/stop`,{method:"POST"});if(f.ok)await this.loadProcesses();else{let k=await f.text();this.error=`Failed to stop process: ${k}`}}catch(f){this.error=`Error stopping process: ${f}`,console.error("Failed to stop process:",f)}},async removeProcess(b){if(!confirm(`Are you sure you want to remove process ${b}?`))return;try{let f=await fetch(`/api/processes/${b}`,{method:"DELETE"});if(f.ok)await this.loadProcesses();else{let k=await f.text();this.error=`Failed to remove process: ${k}`}}catch(f){this.error=`Error removing process: ${f}`,console.error("Failed to remove process:",f)}},getStatusClass(b){switch(b){case"Running":return"status-running";case"Stopped":return"status-stopped";case"Failed":return"status-failed";case"NotStarted":default:return"status-notstarted"}},startAutoRefresh(){let b=window.Alpine.store("state");if(b.autoRefresh&&!this.refreshInterval)this.refreshInterval=setInterval(()=>{this.loadProcesses()},b.refreshInterval)},stopAutoRefresh(){if(this.refreshInterval)clearInterval(this.refreshInterval),this.refreshInterval=null},async init(){if(this.initialized){console.warn("Processes store init() called multiple times - skipping");return}this.initialized=!0,console.log("Processes store init"),await this.loadProcesses(),this.startAutoRefresh()}};window.Alpine.store("processes",j),j.init()});console.log("Event listener registered");})();
